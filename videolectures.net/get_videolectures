#!/usr/bin/env python
"""
Usage: get_videolectures [options] http://videolectures.net/XXX/[video/NNN/]

This is a little Python script which allows you to easily download .flv video
files from http://videolectures.net, and resume unfinished downloads.

Video file will be retrieved via RTMP protocol and saved into an .flv file
with automatically-determined name. If file already exists, will try to resume
download. To download multi-part videos, append video/NNN/ suffixes to the URL.

RTMPDump utility v1.5 or higher is required.
"""

import optparse
import os
import re
import subprocess
import sys
import time
import urllib2

def find_rtmpdump():
    rtmpdump = os.popen('which rtmpdump', 'r').read().strip()
    if not os.path.exists(rtmpdump):
        sys.stderr.write('Error: can not find rtmpdump\n')
        sys.exit(1)
    return rtmpdump

def main():
    parser = optparse.OptionParser(usage=__doc__.strip())
    parser.add_option('-r', dest='max_retries', default=1,
            help='maximum number of automatic retries (default: %default)')
    parser.add_option('-o', dest='output')
    (options, args) = parser.parse_args()

    if len(args) != 1:
        parser.print_help()
        sys.exit(1)

    rtmpdump = find_rtmpdump()
    url = args[0]

    print 'Downloading %s' % url
    html = urllib2.urlopen(url).read()

    def extract(regex):
        matches = re.findall(regex, html)
        if len(matches) == 1:
            return matches[0]
        else:
            raise Exception("Parsing error: failed to match regular expression '%s'" % regex)

    rtmp_base = extract(r'netConnectionUrl = "([^"]+)"')
    assert rtmp_base.startswith('rtmp://')
    assert rtmp_base.endswith('/video')

    rtmp_file = extract(r'clip.url = "([^"]+)"')
    assert rtmp_file.startswith('flv:')
    rtmp_path = rtmp_file[4:]
    rtmp_url = rtmp_base + '/' + rtmp_file
    print 'Media URL: %s' % rtmp_url

    filename = options.output if options.output else rtmp_file.split('/')[-1]
    print 'Filename: %s' % filename

    retry_num = 0
    prev_size = None

    while True:
        args = [
            rtmpdump,
            '-r', rtmp_url,
            '-t', rtmp_base,
            '-a', 'video',   # suffix of rtmp_base
            '-y', rtmp_path,
            '-s', 'http://media.videolectures.net/jw-player/player.swf',
            '-o', filename
        ]

        if os.path.exists(filename):
            print 'Resuming download'
            args += ['-e']

        print 'Executing:'
        print ' '.join(args)

        ret = os.spawnv(os.P_WAIT, rtmpdump, args)
        if ret == 0:
            print 'Successful download'
            sys.exit(0)

        print 'Download failed, rtmpdump return code: %d' % ret

        retry_num += 1
        if retry_num >= options.max_retries:
            if options.max_retries > 1:
                print 'Retry limit exceeded, aborting.'
            sys.exit(1)

        if os.path.exists(filename):
            if prev_size is not None and os.path.getsize(filename) == prev_size:
                print 'No progress since last attempt: will restart download'
                os.unlink(filename)
                prev_size = None
            else:
                prev_size = os.path.getsize(filename)
        else:
            prev_size = None

        time.sleep(3)

if __name__ == '__main__':
    main()
